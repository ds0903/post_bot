#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
"""

import asyncio
import sys

try:
    from database import Database
    from config import DB_CONFIG
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ñ–∞–π–ª config.py —ñ—Å–Ω—É—î!")
    sys.exit(1)

async def check_database():
    print("=" * 50)
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    print("=" * 50)
    print()
    
    print("üìã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î:")
    print(f"  Host: {DB_CONFIG['host']}")
    print(f"  Database: {DB_CONFIG['database']}")
    print(f"  User: {DB_CONFIG['user']}")
    print(f"  Port: {DB_CONFIG['port']}")
    print()
    
    try:
        print("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db = Database()
        print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
        print()
        
        print("üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å...")
        await db.create_tables()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        print()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
        cursor = db.get_cursor()
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        tables = cursor.fetchall()
        cursor.close()
        
        print("üìä –¢–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:")
        for table in tables:
            print(f"  ‚úì {table['table_name']}")
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor = db.get_cursor()
        cursor.execute("SELECT COUNT(*) as count FROM users")
        users_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM admins")
        admins_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM posts")
        posts_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM posts WHERE status = 'pending'")
        pending_count = cursor.fetchone()['count']
        
        cursor.close()
        
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users_count}")
        print(f"  üë®‚Äçüíº –ê–¥–º—ñ–Ω—ñ–≤: {admins_count}")
        print(f"  üìù –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤: {posts_count}")
        print(f"  ‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_count}")
        print()
        
        print("‚úÖ –í—Å–µ –ø—Ä–∞—Ü—é—î –≤—ñ–¥–º—ñ–Ω–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        print()
        print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ:")
        print("  1. PostgreSQL –∑–∞–ø—É—â–µ–Ω–∏–π")
        print("  2. –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        print("  3. –î–∞–Ω—ñ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤ config.py –ø—Ä–∞–≤–∏–ª—å–Ω—ñ")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(check_database())
