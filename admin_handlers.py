import bcrypt
from aiogram import F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database import Database
from config import ADMIN_PASSWORD_HASH

db = Database()

class AdminStates(StatesGroup):
    in_admin_panel = State()
    selecting_channel_for_requests = State()

class ChannelManageStates(StatesGroup):
    choosing_action = State()
    selecting_channel = State()
    confirming_delete = State()
    entering_new_channel_id = State()
    entering_new_channel_name = State()
    adding_channel_name = State()
    adding_channel_id = State()

class SpamProtectionStates(StatesGroup):
    in_spam_menu = State()
    entering_delay_minutes = State()

def get_admin_menu_keyboard():
    buttons = [
        [KeyboardButton(text="üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")],
        [KeyboardButton(text="üìä –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞—è–≤–æ–∫")],
        [KeyboardButton(text="üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏")],
        [KeyboardButton(text="üõ° –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É")],
        [KeyboardButton(text="üö™ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω–∫–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_channels_with_requests_keyboard():
    channels = db.get_channels_with_pending_posts()
    if not channels:
        return None
    buttons = []
    for channel in channels:
        buttons.append([KeyboardButton(text=channel)])
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_channel_management_keyboard():
    buttons = [
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª")],
        [KeyboardButton(text="üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª")],
        [KeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤")],
        # [KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Å–∏—Ä—ñ—Ç—Å—å–∫—ñ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_channel_edit_actions_keyboard():
    buttons = [
        [KeyboardButton(text="üìù –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É")],
        [KeyboardButton(text="üîó –ó–º—ñ–Ω–∏—Ç–∏ ID")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_channels_list_keyboard():
    channels = db.get_all_channels()
    buttons = []
    for channel_name in channels.keys():
        buttons.append([KeyboardButton(text=channel_name)])
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_confirm_keyboard_simple():
    buttons = [
        [KeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")],
        [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_spam_protection_keyboard():
    buttons = [
        [KeyboardButton(text="‚è± –ó–º—ñ–Ω–∏—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫—É")],
        [KeyboardButton(text="üîÑ –£–≤—ñ–º–∫–Ω—É—Ç–∏/–í–∏–º–∫–Ω—É—Ç–∏")],
        [KeyboardButton(text="üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_moderation_keyboard(post_id: int):
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{post_id}"),
            InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{post_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def setup_admin_handlers(dp, bot: Bot, load_channels_func):
    
    @dp.message(Command("admin"))
    async def cmd_admin(message: Message, state: FSMContext):
        user_id = message.from_user.id
        if not db.is_admin(user_id):
            await message.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É!")
            return
        parts = message.text.strip().split(maxsplit=1)
        if len(parts) != 2:
            await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /admin –ø–∞—Ä–æ–ª—å")
            return
        try:
            if bcrypt.checkpw(parts[1].encode('utf-8'), ADMIN_PASSWORD_HASH.encode('utf-8')):
                try:
                    await message.delete()
                except:
                    pass
                await message.answer("‚úÖ –£–≤—ñ–π—à–ª–∏ –≤ –∞–¥–º—ñ–Ω–∫—É!", reply_markup=get_admin_menu_keyboard())
                await state.set_state(AdminStates.in_admin_panel)
            else:
                await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å!")
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # ============= –ú–û–î–ï–†–ê–¶–Ü–Ø =============

    @dp.message(AdminStates.in_admin_panel, F.text == "üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")
    async def show_pending_posts_channels(message: Message, state: FSMContext):
        keyboard = get_channels_with_requests_keyboard()
        if not keyboard:
            await message.answer("–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
            return
        
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞—è–≤–æ–∫:", reply_markup=keyboard)
        await state.set_state(AdminStates.selecting_channel_for_requests)

    @dp.message(AdminStates.selecting_channel_for_requests, F.text == "üîô –ù–∞–∑–∞–¥")
    async def back_to_admin_menu_from_channels(message: Message, state: FSMContext):
        await message.answer("–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())
        await state.set_state(AdminStates.in_admin_panel)

    @dp.message(AdminStates.selecting_channel_for_requests)
    async def show_pending_posts_by_channel(message: Message, state: FSMContext):
        from aiogram.types import InputMediaPhoto, InputMediaVideo
        import logging
        
        selected_channel = message.text
        logger = logging.getLogger(__name__)
        logger.info(f"–û–±—Ä–∞–Ω–æ –∫–∞–Ω–∞–ª: '{selected_channel}'")
        
        channels = db.get_all_channels()
        logger.info(f"–í—Å—ñ –∫–∞–Ω–∞–ª–∏: {list(channels.keys())}")
        
        if selected_channel not in channels:
            logger.warning(f"–ö–∞–Ω–∞–ª '{selected_channel}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –∑—ñ —Å–ø–∏—Å–∫—É:", reply_markup=get_channels_with_requests_keyboard())
            return
        
        pending_posts = db.get_pending_posts_by_channel(selected_channel)
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(pending_posts) if pending_posts else 0} –∑–∞—è–≤–æ–∫")
        
        if not pending_posts:
            await message.answer(f"–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–∞–Ω–∞–ª—É '{selected_channel}'.", reply_markup=get_channels_with_requests_keyboard())
            return
        
        await message.answer(f"üìã –ó–∞—è–≤–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª—É: <b>{selected_channel}</b>", parse_mode="HTML", reply_markup=get_admin_menu_keyboard())
        
        for post in pending_posts:
            post_id, user_id, username, channel, msg_data, created_at = post
            text = f"üÜî #{post_id}\nüë§ @{username}\nüì¢ {channel}\nüïí {created_at}"
            
            if msg_data.get('media_group'):
                media_group = []
                caption_text = msg_data.get('caption', '')
                
                for idx, item in enumerate(msg_data['media_group']):
                    caption = (text + "\n\n" + caption_text) if idx == 0 else None
                    if item['type'] == 'photo':
                        media_group.append(InputMediaPhoto(media=item['file_id'], caption=caption))
                    elif item['type'] == 'video':
                        media_group.append(InputMediaVideo(media=item['file_id'], caption=caption))
                
                await message.answer_media_group(media=media_group)
                await message.answer("–î—ñ—ó:", reply_markup=get_moderation_keyboard(post_id))
            elif msg_data.get('photo'):
                caption_text = msg_data.get('caption', '')
                full_text = text + ("\n\n" + caption_text if caption_text else "")
                await message.answer_photo(msg_data['photo'], caption=full_text, reply_markup=get_moderation_keyboard(post_id))
            elif msg_data.get('video'):
                caption_text = msg_data.get('caption', '')
                full_text = text + ("\n\n" + caption_text if caption_text else "")
                await message.answer_video(msg_data['video'], caption=full_text, reply_markup=get_moderation_keyboard(post_id))
            else:
                full_text = text + "\n\n" + msg_data.get('text', '')
                await message.answer(full_text, reply_markup=get_moderation_keyboard(post_id))
        
        await state.set_state(AdminStates.in_admin_panel)

    @dp.message(AdminStates.in_admin_panel, F.text == "üìä –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞—è–≤–æ–∫")
    async def show_history(message: Message):
        history = db.get_posts_history(limit=20)
        if not history:
            await message.answer("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
            return
        text = "üìä –Ü—Å—Ç–æ—Ä—ñ—è:\n\n"
        for post in history:
            status_emoji = "‚úÖ" if post[3] == "approved" else "‚ùå"
            text += f"{status_emoji} #{post[0]} | @{post[1]} ‚Üí {post[2]}\n"
        await message.answer(text)

    # ============= –ö–ï–†–£–í–ê–ù–ù–Ø –ö–ê–ù–ê–õ–ê–ú–ò =============

    @dp.message(AdminStates.in_admin_panel, F.text == "üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏")
    async def channel_management_menu(message: Message, state: FSMContext):
        await message.answer(
            "üîß <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_channel_management_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(ChannelManageStates.choosing_action)

    @dp.message(ChannelManageStates.choosing_action, F.text == "üîô –ù–∞–∑–∞–¥")
    async def back_from_channel_management(message: Message, state: FSMContext):
        await message.answer("–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())
        await state.set_state(AdminStates.in_admin_panel)

    # ===== –î–û–î–ê–¢–ò –ö–ê–ù–ê–õ =====

    @dp.message(ChannelManageStates.choosing_action, F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª")
    async def add_channel_start(message: Message, state: FSMContext):
        await message.answer(
            "‚ûï <b>–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–∞–Ω–∞–ª</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É:",
            reply_markup=get_confirm_keyboard_simple(),
            parse_mode="HTML"
        )
        await state.set_state(ChannelManageStates.adding_channel_name)

    @dp.message(ChannelManageStates.adding_channel_name, F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    async def cancel_add_channel_name(message: Message, state: FSMContext):
        await message.answer("üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏:", reply_markup=get_channel_management_keyboard())
        await state.set_state(ChannelManageStates.choosing_action)

    @dp.message(ChannelManageStates.adding_channel_name)
    async def add_channel_name_entered(message: Message, state: FSMContext):
        channel_name = message.text.strip()
        channels = db.get_all_channels()
        
        if channel_name in channels:
            await message.answer("‚ùå –ö–∞–Ω–∞–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î! –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:")
            return
        
        await state.update_data(new_channel_name=channel_name)
        await message.answer(
            f"–ù–∞–∑–≤–∞: <b>{channel_name}</b>\n\n"
            f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @channel –∞–±–æ https://t.me/channel):",
            parse_mode="HTML"
        )
        await state.set_state(ChannelManageStates.adding_channel_id)

    @dp.message(ChannelManageStates.adding_channel_id, F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    async def cancel_add_channel_id(message: Message, state: FSMContext):
        await message.answer("üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏:", reply_markup=get_channel_management_keyboard())
        await state.set_state(ChannelManageStates.choosing_action)

    @dp.message(ChannelManageStates.adding_channel_id)
    async def add_channel_id_entered(message: Message, state: FSMContext):
        channel_link = message.text.strip()
        
        if not (channel_link.startswith('@') or 't.me/' in channel_link):
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å ID —É —Ñ–æ—Ä–º–∞—Ç—ñ @channel –∞–±–æ https://t.me/channel")
            return
        
        if 't.me/' in channel_link:
            channel_id = '@' + channel_link.split('t.me/')[-1].strip('/')
        else:
            channel_id = channel_link
        
        data = await state.get_data()
        new_channel_name = data['new_channel_name']
        
        if db.add_channel(new_channel_name, channel_id):
            load_channels_func()
            
            await message.answer(
                f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–¥–∞–Ω–æ!</b>\n\n"
                f"–ù–∞–∑–≤–∞: <b>{new_channel_name}</b>\n"
                f"ID: {channel_id}\n\n"
                f"‚ö†Ô∏è <b>–í–ê–ñ–õ–ò–í–û:</b> –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ –∫–∞–Ω–∞–ª—É —Ç–∞ –Ω–∞–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
                reply_markup=get_channel_management_keyboard(),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É!",
                reply_markup=get_channel_management_keyboard()
            )
        
        await state.set_state(ChannelManageStates.choosing_action)

    # ===== –í–ò–î–ê–õ–ò–¢–ò –ö–ê–ù–ê–õ =====

    @dp.message(ChannelManageStates.choosing_action, F.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª")
    async def delete_channel_start(message: Message, state: FSMContext):
        channels = db.get_all_channels()
        if not channels:
            await message.answer("‚ùå –ù–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
            return
        
        await message.answer(
            "üóë <b>–í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
            reply_markup=get_channels_list_keyboard(),
            parse_mode="HTML"
        )
        await state.update_data(action_type='delete')
        await state.set_state(ChannelManageStates.selecting_channel)

    # –í–ê–ñ–õ–ò–í–û: –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ –º–∞—é—Ç—å –π—Ç–∏ –ü–ï–†–ï–î –∑–∞–≥–∞–ª—å–Ω–∏–º –æ–±—Ä–æ–±–Ω–∏–∫–æ–º
    @dp.message(ChannelManageStates.selecting_channel, F.text == "üìù –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É")
    async def change_channel_name(message: Message, state: FSMContext):
        data = await state.get_data()
        channel_name = data.get('channel_to_edit')
        
        if not channel_name:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –æ–±—Ä–∞–Ω–æ")
            return
        
        await message.answer(
            f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞: <b>{channel_name}</b>\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É:",
            reply_markup=get_confirm_keyboard_simple(),
            parse_mode="HTML"
        )
        await state.set_state(ChannelManageStates.entering_new_channel_name)

    @dp.message(ChannelManageStates.selecting_channel, F.text == "üîó –ó–º—ñ–Ω–∏—Ç–∏ ID")
    async def change_channel_id(message: Message, state: FSMContext):
        data = await state.get_data()
        channel_name = data.get('channel_to_edit')
        
        if not channel_name:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –æ–±—Ä–∞–Ω–æ")
            return
            
        channels = db.get_all_channels()
        
        await message.answer(
            f"–ö–∞–Ω–∞–ª: <b>{channel_name}</b>\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π ID: {channels[channel_name]}\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π ID (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @new_channel):",
            reply_markup=get_confirm_keyboard_simple(),
            parse_mode="HTML"
        )
        await state.set_state(ChannelManageStates.entering_new_channel_id)

    @dp.message(ChannelManageStates.selecting_channel, F.text == "üîô –ù–∞–∑–∞–¥")
    async def back_from_selecting_channel(message: Message, state: FSMContext):
        await message.answer(
            "üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏:",
            reply_markup=get_channel_management_keyboard()
        )
        await state.set_state(ChannelManageStates.choosing_action)

    @dp.message(ChannelManageStates.selecting_channel)
    async def channel_selected(message: Message, state: FSMContext):
        channel_name = message.text
        channels = db.get_all_channels()
        
        if channel_name not in channels:
            await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –∑—ñ —Å–ø–∏—Å–∫—É:", reply_markup=get_channels_list_keyboard())
            return
        
        data = await state.get_data()
        action_type = data.get('action_type')
        
        if action_type == 'delete':
            await state.update_data(channel_to_delete=channel_name)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—è–≤–æ–∫
            pending_count = len(db.get_pending_posts_by_channel(channel_name))
            
            warning_text = f"‚ùóÔ∏è <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è</b>\n\n" \
                          f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª:\n" \
                          f"<b>{channel_name}</b> ({channels[channel_name]})\n\n" \
                          f"‚ö†Ô∏è –¶–µ –Ω–µ –≤–∏–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∏ –∑ –ë–î, –∞–ª–µ –∫–∞–Ω–∞–ª –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫."
            
            if pending_count > 0:
                warning_text += f"\n\nüóë <b>–£–í–ê–ì–ê:</b> –ë—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ {pending_count} –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!"
            
            await message.answer(
                warning_text,
                reply_markup=get_confirm_keyboard_simple(),
                parse_mode="HTML"
            )
            # –í–ê–ñ–õ–ò–í–û: –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            await state.set_state(ChannelManageStates.confirming_delete)
        elif action_type == 'edit':
            await state.update_data(channel_to_edit=channel_name)
            await message.answer(
                f"üìù <b>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª:</b> {channel_name}\n\n"
                f"–ü–æ—Ç–æ—á–Ω–∏–π ID: {channels[channel_name]}\n\n"
                f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=get_channel_edit_actions_keyboard(),
                parse_mode="HTML"
            )

    @dp.message(F.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
    async def confirm_action(message: Message, state: FSMContext):
        current_state = await state.get_state()
        data = await state.get_data()
        
        if current_state == ChannelManageStates.confirming_delete.state:
            channel_name = data.get('channel_to_delete')
            if channel_name:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—è–≤–æ–∫ –¥–ª—è —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É
                pending_count = len(db.get_pending_posts_by_channel(channel_name))
                
                if db.delete_channel(channel_name):
                    load_channels_func()
                    
                    message_text = f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel_name}</b> –≤–∏–¥–∞–ª–µ–Ω–æ!"
                    if pending_count > 0:
                        message_text += f"\n\nüóë –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª–µ–Ω–æ {pending_count} –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é."
                    
                    await message.answer(
                        message_text,
                        reply_markup=get_channel_management_keyboard(),
                        parse_mode="HTML"
                    )
                else:
                    await message.answer(
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É!",
                        reply_markup=get_channel_management_keyboard()
                    )
                await state.set_state(ChannelManageStates.choosing_action)
        elif current_state == ChannelManageStates.entering_new_channel_name.state:
            old_name = data.get('channel_to_edit')
            new_name = data.get('new_channel_name')
            
            if db.rename_channel(old_name, new_name):
                load_channels_func()
                await message.answer(
                    f"‚úÖ –ù–∞–∑–≤—É –∫–∞–Ω–∞–ª—É –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
                    f"–°—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞: <b>{old_name}</b>\n"
                    f"–ù–æ–≤–∞ –Ω–∞–∑–≤–∞: <b>{new_name}</b>",
                    reply_markup=get_channel_management_keyboard(),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏!",
                    reply_markup=get_channel_management_keyboard()
                )
            await state.set_state(ChannelManageStates.choosing_action)
        elif current_state == ChannelManageStates.entering_new_channel_id.state:
            channel_name = data.get('channel_to_edit')
            new_id = data.get('new_channel_id')
            
            if db.update_channel(channel_name, new_id):
                load_channels_func()
                await message.answer(
                    f"‚úÖ ID –∫–∞–Ω–∞–ª—É –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
                    f"–ö–∞–Ω–∞–ª: <b>{channel_name}</b>\n"
                    f"–ù–æ–≤–∏–π ID: {new_id}\n\n"
                    f"‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–¥–∞—Ç–∏ –±–æ—Ç–∞ –¥–æ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É!",
                    reply_markup=get_channel_management_keyboard(),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ ID!",
                    reply_markup=get_channel_management_keyboard()
                )
            await state.set_state(ChannelManageStates.choosing_action)

    @dp.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    async def cancel_action(message: Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state == ChannelManageStates.confirming_delete.state:
            await message.answer(
                "‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
                reply_markup=get_channel_management_keyboard()
            )
            await state.set_state(ChannelManageStates.choosing_action)
        elif current_state and "ChannelManage" in current_state:
            await message.answer(
                "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.",
                reply_markup=get_channel_management_keyboard()
            )
            await state.set_state(ChannelManageStates.choosing_action)
        elif current_state and "SpamProtection" in current_state:
            await message.answer(
                "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.",
                reply_markup=get_spam_protection_keyboard()
            )
            await state.set_state(SpamProtectionStates.in_spam_menu)

    # ===== –†–ï–î–ê–ì–£–í–ê–¢–ò –ö–ê–ù–ê–õ =====

    @dp.message(ChannelManageStates.choosing_action, F.text == "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª")
    async def edit_channel_start(message: Message, state: FSMContext):
        channels = db.get_all_channels()
        if not channels:
            await message.answer("‚ùå –ù–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            return
        
        await message.answer(
            "üìù <b>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª:",
            reply_markup=get_channels_list_keyboard(),
            parse_mode="HTML"
        )
        await state.update_data(action_type='edit')
        await state.set_state(ChannelManageStates.selecting_channel)

    @dp.message(ChannelManageStates.entering_new_channel_name, F.text != "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
    async def new_name_entered(message: Message, state: FSMContext):
        if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            return
            
        new_name = message.text.strip()
        channels = db.get_all_channels()
        
        if new_name in channels:
            await message.answer("‚ùå –ö–∞–Ω–∞–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î! –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:")
            return
        
        data = await state.get_data()
        old_name = data.get('channel_to_edit')
        
        await state.update_data(new_channel_name=new_name)
        await message.answer(
            f"üìù <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏:</b>\n\n"
            f"–°—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞: <b>{old_name}</b>\n"
            f"‚û°Ô∏è –ù–æ–≤–∞ –Ω–∞–∑–≤–∞: <b>{new_name}</b>\n\n"
            f"ID –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è: {channels[old_name]}",
            reply_markup=get_confirm_keyboard_simple(),
            parse_mode="HTML"
        )

    @dp.message(ChannelManageStates.entering_new_channel_id, F.text != "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
    async def new_id_entered(message: Message, state: FSMContext):
        if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            return
            
        channel_link = message.text.strip()
        
        if not (channel_link.startswith('@') or 't.me/' in channel_link):
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å ID —É —Ñ–æ—Ä–º–∞—Ç—ñ @channel –∞–±–æ https://t.me/channel")
            return
        
        if 't.me/' in channel_link:
            channel_id = '@' + channel_link.split('t.me/')[-1].strip('/')
        else:
            channel_id = channel_link
        
        data = await state.get_data()
        channel_name = data.get('channel_to_edit')
        channels = db.get_all_channels()
        
        await state.update_data(new_channel_id=channel_id)
        await message.answer(
            f"üìù <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ ID:</b>\n\n"
            f"–ö–∞–Ω–∞–ª: <b>{channel_name}</b>\n"
            f"–°—Ç–∞—Ä–∏–π ID: {channels[channel_name]}\n"
            f"‚û°Ô∏è –ù–æ–≤–∏–π ID: {channel_id}",
            reply_markup=get_confirm_keyboard_simple(),
            parse_mode="HTML"
        )

    @dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
    async def back_handler(message: Message, state: FSMContext):
        current_state = await state.get_state()
        
        if current_state == ChannelManageStates.selecting_channel.state:
            await message.answer(
                "üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏:",
                reply_markup=get_channel_management_keyboard()
            )
            await state.set_state(ChannelManageStates.choosing_action)
        elif current_state in [ChannelManageStates.entering_new_channel_name.state, ChannelManageStates.entering_new_channel_id.state]:
            data = await state.get_data()
            channel_name = data.get('channel_to_edit')
            channels = db.get_all_channels()
            await message.answer(
                f"üìù <b>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª:</b> {channel_name}\n\n"
                f"–ü–æ—Ç–æ—á–Ω–∏–π ID: {channels[channel_name]}\n\n"
                f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=get_channel_edit_actions_keyboard(),
                parse_mode="HTML"
            )
            await state.set_state(ChannelManageStates.selecting_channel)
        elif current_state == SpamProtectionStates.in_spam_menu.state:
            await message.answer("–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())
            await state.set_state(AdminStates.in_admin_panel)

    # ===== –°–ü–ò–°–û–ö –ö–ê–ù–ê–õ–Ü–í =====

    @dp.message(ChannelManageStates.choosing_action, F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤")
    async def show_channels_list(message: Message):
        channels = db.get_all_channels()
        if not channels:
            await message.answer("‚ùå –ù–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
            return
        
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤:</b>\n\n"
        for idx, (name, channel_id) in enumerate(channels.items(), 1):
            text += f"{idx}. <b>{name}</b>\n   ID: {channel_id}\n\n"
        
        await message.answer(text, parse_mode="HTML")

    # ===== –û–ß–ò–°–¢–ò–¢–ò –°–ò–†–Ü–¢–°–¨–ö–Ü –ó–ê–Ø–í–ö–ò =====

    @dp.message(ChannelManageStates.choosing_action, F.text == "üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Å–∏—Ä—ñ—Ç—Å—å–∫—ñ –∑–∞—è–≤–∫–∏")
    async def cleanup_orphaned_posts_handler(message: Message):
        orphaned_count = db.cleanup_orphaned_posts()
        
        if orphaned_count > 0:
            await message.answer(
                f"üßπ <b>–û—á–∏—â–µ–Ω–æ!</b>\n\n"
                f"–í–∏–¥–∞–ª–µ–Ω–æ {orphaned_count} –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤, —è–∫—ñ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—é—Ç—å.",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚úÖ –°–∏—Ä—ñ—Ç—Å—å–∫–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–í—Å—ñ –∑–∞—è–≤–∫–∏ –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤."
            )

    # ============= –ó–ê–•–ò–°–¢ –í–Ü–î –°–ü–ê–ú–£ =============

    @dp.message(AdminStates.in_admin_panel, F.text == "üõ° –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É")
    async def spam_protection_menu(message: Message, state: FSMContext):
        settings = db.get_spam_settings()
        status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if settings['enabled'] else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
        
        await message.answer(
            f"üõ° <b>–ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ó–∞—Ç—Ä–∏–º–∫–∞: {settings['minutes']} —Ö–≤.\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_spam_protection_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(SpamProtectionStates.in_spam_menu)

    @dp.message(SpamProtectionStates.in_spam_menu, F.text == "üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å")
    async def show_spam_status(message: Message):
        settings = db.get_spam_settings()
        status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if settings['enabled'] else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
        
        await message.answer(
            f"üìä <b>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å</b>\n\n"
            f"–§—É–Ω–∫—Ü—ñ—è: {status}\n"
            f"–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ—Å—Ç–∞–º–∏: {settings['minutes']} —Ö–≤.\n\n"
            f"{'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ—Å—Ç–∏ –Ω–µ —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ ' + str(settings['minutes']) + ' —Ö–≤.' if settings['enabled'] else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ—Å—Ç–∏ –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å.'}",
            parse_mode="HTML"
        )

    @dp.message(SpamProtectionStates.in_spam_menu, F.text == "üîÑ –£–≤—ñ–º–∫–Ω—É—Ç–∏/–í–∏–º–∫–Ω—É—Ç–∏")
    async def toggle_spam_protection(message: Message):
        settings = db.get_spam_settings()
        new_status = not settings['enabled']
        
        if db.set_spam_protection_enabled(new_status):
            status_text = "‚úÖ —É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_status else "‚ùå –≤–∏–º–∫–Ω–µ–Ω–æ"
            await message.answer(
                f"üîÑ –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É {status_text}!",
                reply_markup=get_spam_protection_keyboard()
            )
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É!")

    @dp.message(SpamProtectionStates.in_spam_menu, F.text == "‚è± –ó–º—ñ–Ω–∏—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫—É")
    async def change_spam_delay_start(message: Message, state: FSMContext):
        settings = db.get_spam_settings()
        await message.answer(
            f"‚è± <b>–ó–º—ñ–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∏</b>\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞: {settings['minutes']} —Ö–≤.\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É (–≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö):",
            reply_markup=get_confirm_keyboard_simple(),
            parse_mode="HTML"
        )
        await state.set_state(SpamProtectionStates.entering_delay_minutes)

    @dp.message(SpamProtectionStates.entering_delay_minutes, F.text != "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    async def change_spam_delay_entered(message: Message, state: FSMContext):
        try:
            minutes = int(message.text.strip())
            if minutes < 1 or minutes > 1440:
                await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 1440 (24 –≥–æ–¥–∏–Ω–∏):")
                return
            
            if db.set_spam_protection_minutes(minutes):
                await message.answer(
                    f"‚úÖ –ó–∞—Ç—Ä–∏–º–∫—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {minutes} —Ö–≤.!",
                    reply_markup=get_spam_protection_keyboard()
                )
                await state.set_state(SpamProtectionStates.in_spam_menu)
            else:
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –∑–∞—Ç—Ä–∏–º–∫–∏!")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ:")

    # ============= –í–ò–•–Ü–î –ó –ê–î–ú–Ü–ù–ö–ò =============

    @dp.message(AdminStates.in_admin_panel, F.text == "üö™ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω–∫–∏")
    async def exit_admin(message: Message, state: FSMContext):
        from aiogram.types import ReplyKeyboardRemove
        await message.answer("üëã –í–∏–π—à–ª–∏.", reply_markup=ReplyKeyboardRemove())
        await state.clear()

    # ============= –ö–û–õ–ë–ï–ö–ò –ú–û–î–ï–†–ê–¶–Ü–á =============

    @dp.callback_query(F.data.startswith("approve_"))
    async def approve_post(callback: CallbackQuery):
        from aiogram.types import InputMediaPhoto, InputMediaVideo
        
        post_id = int(callback.data.split("_")[1])
        post_data = db.get_post_by_id(post_id)
        if not post_data:
            return
        _, user_id, username, channel, msg_data, _ = post_data
        
        channels = db.get_all_channels()
        channel_id = channels.get(channel)
        
        if not channel_id:
            await callback.answer(f"‚ùå –ö–∞–Ω–∞–ª '{channel}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î!")
            return
        
        try:
            if msg_data.get('media_group'):
                media_group = []
                caption_text = msg_data.get('caption', '')
                for idx, item in enumerate(msg_data['media_group']):
                    if item['type'] == 'photo':
                        media_group.append(InputMediaPhoto(media=item['file_id'], caption=caption_text if idx == 0 else None))
                    elif item['type'] == 'video':
                        media_group.append(InputMediaVideo(media=item['file_id'], caption=caption_text if idx == 0 else None))
                await bot.send_media_group(chat_id=channel_id, media=media_group)
            elif msg_data.get('photo'):
                await bot.send_photo(channel_id, msg_data['photo'], caption=msg_data.get('caption', ''))
            elif msg_data.get('video'):
                await bot.send_video(channel_id, msg_data['video'], caption=msg_data.get('caption', ''))
            else:
                await bot.send_message(channel_id, msg_data.get('text', ''))
            
            db.update_post_status(post_id, 'approved')
            await bot.send_message(user_id, f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ '{channel}'!")
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.answer("‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
        except Exception as e:
            await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    @dp.callback_query(F.data.startswith("reject_"))
    async def reject_post(callback: CallbackQuery):
        post_id = int(callback.data.split("_")[1])
        post_data = db.get_post_by_id(post_id)
        if not post_data:
            return
        _, user_id, _, channel, _, _ = post_data
        db.update_post_status(post_id, 'rejected')
        try:
            await bot.send_message(user_id, f"‚ùå –ü–æ—Å—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        except:
            pass
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer("‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ!")
