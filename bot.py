import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, BotCommand
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
import bcrypt
from datetime import datetime, timedelta
from database import Database
from config import BOT_TOKEN, ADMIN_PASSWORD_HASH, POST_TIME_CHECK_ENABLED, POST_DELAY_MINUTES

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database()

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∫–∞–Ω–∞–ª—ñ–≤ - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –∑ –ë–î
CHANNELS = {}

album_data = {}

def load_channels_from_db():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–∞–Ω–∞–ª–∏ –∑ –ë–î –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫"""
    global CHANNELS
    CHANNELS = db.get_all_channels()
    logger.info(f"üì° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(CHANNELS)} –∫–∞–Ω–∞–ª—ñ–≤ –∑ –ë–î")

class UserStates(StatesGroup):
    waiting_for_post = State()
    confirming_post = State()

class AdminStates(StatesGroup):
    in_admin_panel = State()
    selecting_channel_for_requests = State()

class ChannelManageStates(StatesGroup):
    choosing_action = State()
    selecting_channel = State()
    entering_new_channel_id = State()
    entering_new_channel_name = State()
    adding_channel_name = State()
    adding_channel_id = State()

def get_admin_menu_keyboard():
    buttons = [
        [KeyboardButton(text="üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")],
        [KeyboardButton(text="üìä –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞—è–≤–æ–∫")],
        [KeyboardButton(text="üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏")],
        [KeyboardButton(text="üö™ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω–∫–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_write_another_post_keyboard():
    buttons = [
        [KeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ —â–µ 1 –ø–æ—Å—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_confirm_keyboard():
    buttons = [
        [KeyboardButton(text="‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")],
        [KeyboardButton(text="üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_moderation_keyboard(post_id: int):
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{post_id}"),
            InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{post_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_channels_with_requests_keyboard():
    channels = db.get_channels_with_pending_posts()
    if not channels:
        return None
    buttons = []
    for channel in channels:
        buttons.append([KeyboardButton(text=channel)])
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_channel_management_keyboard():
    buttons = [
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª")],
        [KeyboardButton(text="üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª")],
        [KeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_channel_edit_actions_keyboard():
    buttons = [
        [KeyboardButton(text="üìù –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É")],
        [KeyboardButton(text="üîó –ó–º—ñ–Ω–∏—Ç–∏ ID")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_channels_list_keyboard():
    buttons = []
    for channel_name in CHANNELS.keys():
        buttons.append([KeyboardButton(text=channel_name)])
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_confirm_keyboard_simple():
    buttons = [
        [KeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")],
        [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, command: CommandObject):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑_–Ω—ñ–∫–∞"
    db.add_user(user_id, username)
    
    if command.args:
        channel_param_raw = command.args.strip()
        channel_found = None
        
        channel_param_name = channel_param_raw.replace('_', ' ')
        for channel_name in CHANNELS.keys():
            if channel_name.lower() == channel_param_name.lower() or channel_param_name.lower() in channel_name.lower():
                channel_found = channel_name
                break
        
        if not channel_found:
            search_id = channel_param_raw if channel_param_raw.startswith('@') else f'@{channel_param_raw}'
            for channel_name, channel_id in CHANNELS.items():
                if channel_id.lower() == search_id.lower():
                    channel_found = channel_name
                    break
        
        if channel_found:
            await state.update_data(channel=channel_found)
            await message.answer(
                f"üì¢ <b>{channel_found}</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å—Ç:",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="HTML"
            )
            await state.set_state(UserStates.waiting_for_post)
        else:
            await message.answer(
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.",
                reply_markup=ReplyKeyboardRemove()
            )
    else:
        await message.answer(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.\n\nüí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫–µ –≤–∞–º –Ω–∞–¥–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.",
            reply_markup=ReplyKeyboardRemove()
        )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìö <b>–î–æ–≤—ñ–¥–∫–∞</b>\n\n"
        "/start - –ø–æ—á–∞—Ç–∏\n"
        "/help - –¥–æ–≤—ñ–¥–∫–∞",
        parse_mode="HTML"
    )

@dp.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not db.is_admin(user_id):
        await message.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É!")
        return
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /admin –ø–∞—Ä–æ–ª—å")
        return
    try:
        if bcrypt.checkpw(parts[1].encode('utf-8'), ADMIN_PASSWORD_HASH.encode('utf-8')):
            try:
                await message.delete()
            except:
                pass
            await message.answer("‚úÖ –£–≤—ñ–π—à–ª–∏ –≤ –∞–¥–º—ñ–Ω–∫—É!", reply_markup=get_admin_menu_keyboard())
            await state.set_state(AdminStates.in_admin_panel)
        else:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å!")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message(F.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ —â–µ 1 –ø–æ—Å—Ç")
async def write_another_post_button(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    channel = data.get('channel')
    
    if not channel:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
    if POST_TIME_CHECK_ENABLED:
        last_post_time = db.get_last_post_time(user_id)
        if last_post_time:
            time_diff = datetime.now() - last_post_time
            if time_diff < timedelta(minutes=POST_DELAY_MINUTES):
                remaining = POST_DELAY_MINUTES - int(time_diff.total_seconds() / 60)
                await message.answer(
                    f"‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ —â–µ {remaining} —Ö–≤. –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ—Å—Ç–æ–º.",
                    reply_markup=get_write_another_post_keyboard()
                )
                return
    
    await message.answer(
        f"üì¢ <b>{channel}</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å—Ç:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_post)

@dp.message(UserStates.waiting_for_post)
async def handle_post_content(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.media_group_id:
        album_key = f"{user_id}_{message.media_group_id}"
        
        if album_key not in album_data:
            album_data[album_key] = {
                'items': [],
                'caption': '',
                'user_id': user_id,
                'state': state,
                'task': None
            }
        
        if message.photo:
            album_data[album_key]['items'].append({'type': 'photo', 'file_id': message.photo[-1].file_id})
        elif message.video:
            album_data[album_key]['items'].append({'type': 'video', 'file_id': message.video.file_id})
        
        if message.caption:
            album_data[album_key]['caption'] = message.caption
        
        if album_data[album_key]['task']:
            album_data[album_key]['task'].cancel()
        
        async def finish_album():
            await asyncio.sleep(1.0)
            if album_key in album_data:
                data = album_data[album_key]
                items = data['items']
                photos = sum(1 for m in items if m['type'] == 'photo')
                videos = sum(1 for m in items if m['type'] == 'video')
                media_text = []
                if photos > 0:
                    media_text.append(f"{photos} —Ñ–æ—Ç–æ")
                if videos > 0:
                    media_text.append(f"{videos} –≤—ñ–¥–µ–æ")
                
                await state.update_data(
                    media_group=items,
                    caption=data['caption'],
                    has_content=True
                )
                await bot.send_message(
                    user_id,
                    f"üì∏ –ê–ª—å–±–æ–º: {' —Ç–∞ '.join(media_text)}\n\n–û–±–µ—Ä–∏ –¥—ñ—é:",
                    reply_markup=get_confirm_keyboard()
                )
                await state.set_state(UserStates.confirming_post)
                del album_data[album_key]
        
        album_data[album_key]['task'] = asyncio.create_task(finish_album())
        return
    
    if message.photo:
        await state.update_data(photo=message.photo[-1].file_id, caption=message.caption or '', has_content=True)
        await message.answer("üì∏ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=get_confirm_keyboard())
        await state.set_state(UserStates.confirming_post)
        return
    
    if message.video:
        await state.update_data(video=message.video.file_id, caption=message.caption or '', has_content=True)
        await message.answer("üé• –í—ñ–¥–µ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=get_confirm_keyboard())
        await state.set_state(UserStates.confirming_post)
        return
    
    if message.text:
        await state.update_data(text_content=message.text, has_content=True)
        await message.answer("üìù –¢–µ–∫—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=get_confirm_keyboard())
        await state.set_state(UserStates.confirming_post)
        return

@dp.message(UserStates.confirming_post, F.text == "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")
async def confirm_and_send_post(message: Message, state: FSMContext):
    data = await state.get_data()
    channel = data.get('channel')
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑_–Ω—ñ–∫–∞"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
    if POST_TIME_CHECK_ENABLED:
        last_post_time = db.get_last_post_time(user_id)
        if last_post_time:
            time_diff = datetime.now() - last_post_time
            if time_diff < timedelta(minutes=POST_DELAY_MINUTES):
                remaining = POST_DELAY_MINUTES - int(time_diff.total_seconds() / 60)
                await message.answer(
                    f"‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ —â–µ {remaining} —Ö–≤. –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ—Å—Ç–æ–º.",
                    reply_markup=get_write_another_post_keyboard()
                )
                await state.clear()
                await state.update_data(channel=channel)
                return
    
    msg_data = {}
    if data.get('media_group'):
        msg_data['media_group'] = data['media_group']
        msg_data['caption'] = data.get('caption', '')
    elif data.get('photo'):
        msg_data['photo'] = data['photo']
        msg_data['caption'] = data.get('caption', '')
    elif data.get('video'):
        msg_data['video'] = data['video']
        msg_data['caption'] = data.get('caption', '')
    elif data.get('text_content'):
        msg_data['text'] = data['text_content']
    
    post_id = db.add_post(user_id, username, channel, msg_data)
    await message.answer(
        f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –ó–∞—è–≤–∫–∞ #{post_id}",
        reply_markup=get_write_another_post_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()
    await state.update_data(channel=channel)

@dp.message(UserStates.confirming_post, F.text == "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ")
async def restart_post_creation(message: Message, state: FSMContext):
    data = await state.get_data()
    channel = data.get('channel')
    await message.answer(
        f"üîÑ –ó–∞–Ω–æ–≤–æ!\n\nüì¢ <b>{channel}</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å—Ç:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_post)

# ============= –ú–û–î–ï–†–ê–¶–Ü–Ø =============

@dp.message(AdminStates.in_admin_panel, F.text == "üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")
async def show_pending_posts_channels(message: Message, state: FSMContext):
    keyboard = get_channels_with_requests_keyboard()
    if not keyboard:
        await message.answer("–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
        return
    
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞—è–≤–æ–∫:", reply_markup=keyboard)
    await state.set_state(AdminStates.selecting_channel_for_requests)

@dp.message(AdminStates.selecting_channel_for_requests, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_admin_menu_from_channels(message: Message, state: FSMContext):
    await message.answer("–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())
    await state.set_state(AdminStates.in_admin_panel)

@dp.message(AdminStates.selecting_channel_for_requests)
async def show_pending_posts_by_channel(message: Message, state: FSMContext):
    selected_channel = message.text
    
    if selected_channel not in CHANNELS:
        await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –∑—ñ —Å–ø–∏—Å–∫—É:", reply_markup=get_channels_with_requests_keyboard())
        return
    
    pending_posts = db.get_pending_posts_by_channel(selected_channel)
    
    if not pending_posts:
        await message.answer(f"–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–∞–Ω–∞–ª—É '{selected_channel}'.", reply_markup=get_channels_with_requests_keyboard())
        return
    
    from aiogram.types import InputMediaPhoto, InputMediaVideo
    
    await message.answer(f"üìã –ó–∞—è–≤–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª—É: <b>{selected_channel}</b>", parse_mode="HTML", reply_markup=get_admin_menu_keyboard())
    
    for post in pending_posts:
        post_id, user_id, username, channel, msg_data, created_at = post
        text = f"üÜî #{post_id}\nüë§ @{username}\nüì¢ {channel}\nüïí {created_at}"
        
        if msg_data.get('media_group'):
            media_group = []
            caption_text = msg_data.get('caption', '')
            
            for idx, item in enumerate(msg_data['media_group']):
                caption = (text + "\n\n" + caption_text) if idx == 0 else None
                if item['type'] == 'photo':
                    media_group.append(InputMediaPhoto(media=item['file_id'], caption=caption))
                elif item['type'] == 'video':
                    media_group.append(InputMediaVideo(media=item['file_id'], caption=caption))
            
            await message.answer_media_group(media=media_group)
            await message.answer("–î—ñ—ó:", reply_markup=get_moderation_keyboard(post_id))
        elif msg_data.get('photo'):
            caption_text = msg_data.get('caption', '')
            full_text = text + ("\n\n" + caption_text if caption_text else "")
            await message.answer_photo(msg_data['photo'], caption=full_text, reply_markup=get_moderation_keyboard(post_id))
        elif msg_data.get('video'):
            caption_text = msg_data.get('caption', '')
            full_text = text + ("\n\n" + caption_text if caption_text else "")
            await message.answer_video(msg_data['video'], caption=full_text, reply_markup=get_moderation_keyboard(post_id))
        else:
            full_text = text + "\n\n" + msg_data.get('text', '')
            await message.answer(full_text, reply_markup=get_moderation_keyboard(post_id))
    
    await state.set_state(AdminStates.in_admin_panel)

@dp.message(AdminStates.in_admin_panel, F.text == "üìä –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞—è–≤–æ–∫")
async def show_history(message: Message):
    history = db.get_posts_history(limit=20)
    if not history:
        await message.answer("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
        return
    text = "üìä –Ü—Å—Ç–æ—Ä—ñ—è:\n\n"
    for post in history:
        status_emoji = "‚úÖ" if post[3] == "approved" else "‚ùå"
        text += f"{status_emoji} #{post[0]} | @{post[1]} ‚Üí {post[2]}\n"
    await message.answer(text)

# ============= –ö–ï–†–£–í–ê–ù–ù–Ø –ö–ê–ù–ê–õ–ê–ú–ò =============

@dp.message(AdminStates.in_admin_panel, F.text == "üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏")
async def channel_management_menu(message: Message, state: FSMContext):
    await message.answer(
        "üîß <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_channel_management_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ChannelManageStates.choosing_action)

@dp.message(ChannelManageStates.choosing_action, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_channel_management(message: Message, state: FSMContext):
    await message.answer("–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())
    await state.set_state(AdminStates.in_admin_panel)

# ===== –î–û–î–ê–¢–ò –ö–ê–ù–ê–õ =====

@dp.message(ChannelManageStates.choosing_action, F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª")
async def add_channel_start(message: Message, state: FSMContext):
    await message.answer(
        "‚ûï <b>–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–∞–Ω–∞–ª</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(ChannelManageStates.adding_channel_name)

@dp.message(ChannelManageStates.adding_channel_name)
async def add_channel_name_entered(message: Message, state: FSMContext):
    channel_name = message.text.strip()
    
    if channel_name in CHANNELS:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î! –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:")
        return
    
    await state.update_data(new_channel_name=channel_name)
    await message.answer(
        f"–ù–∞–∑–≤–∞: <b>{channel_name}</b>\n\n"
        f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @channel –∞–±–æ https://t.me/):",
        parse_mode="HTML"
    )
    await state.set_state(ChannelManageStates.adding_channel_id)

@dp.message(ChannelManageStates.adding_channel_id)
async def add_channel_id_entered(message: Message, state: FSMContext):
    channel_link = message.text.strip()
    
    if not (channel_link.startswith('@') or 't.me/' in channel_link):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å ID —É —Ñ–æ—Ä–º–∞—Ç—ñ @channel –∞–±–æ https://t.me/")
        return
    
    if 't.me/' in channel_link:
        channel_id = '@' + channel_link.split('t.me/')[-1].strip('/')
    else:
        channel_id = channel_link
    
    data = await state.get_data()
    new_channel_name = data['new_channel_name']
    
    # –î–æ–¥–∞—î–º–æ –≤ –ë–î
    if db.add_channel(new_channel_name, channel_id):
        # –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
        load_channels_from_db()
        
        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–¥–∞–Ω–æ!</b>\n\n"
            f"–ù–∞–∑–≤–∞: <b>{new_channel_name}</b>\n"
            f"ID: {channel_id}\n\n"
            f"‚ö†Ô∏è <b>–í–ê–ñ–õ–ò–í–û:</b> –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ –∫–∞–Ω–∞–ª—É —Ç–∞ –Ω–∞–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            reply_markup=get_channel_management_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É!",
            reply_markup=get_channel_management_keyboard()
        )
    
    await state.set_state(ChannelManageStates.choosing_action)

# ===== –í–ò–î–ê–õ–ò–¢–ò –ö–ê–ù–ê–õ =====

@dp.message(ChannelManageStates.choosing_action, F.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª")
async def delete_channel_start(message: Message, state: FSMContext):
    if not CHANNELS:
        await message.answer("‚ùå –ù–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    
    await message.answer(
        "üóë <b>–í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
        reply_markup=get_channels_list_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(action_type='delete')
    await state.set_state(ChannelManageStates.selecting_channel)

@dp.message(ChannelManageStates.selecting_channel, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_selecting_channel(message: Message, state: FSMContext):
    await message.answer(
        "üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏:",
        reply_markup=get_channel_management_keyboard()
    )
    await state.set_state(ChannelManageStates.choosing_action)

@dp.message(ChannelManageStates.selecting_channel)
async def channel_selected(message: Message, state: FSMContext):
    channel_name = message.text
    
    if channel_name not in CHANNELS:
        await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –∑—ñ —Å–ø–∏—Å–∫—É:", reply_markup=get_channels_list_keyboard())
        return
    
    data = await state.get_data()
    action_type = data.get('action_type')
    
    if action_type == 'delete':
        await state.update_data(channel_to_delete=channel_name)
        await message.answer(
            f"‚ùóÔ∏è <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è</b>\n\n"
            f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª:\n"
            f"<b>{channel_name}</b> ({CHANNELS[channel_name]})\n\n"
            f"‚ö†Ô∏è –¶–µ –Ω–µ –≤–∏–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∏ –∑ –ë–î, –∞–ª–µ –∫–∞–Ω–∞–ª –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫.",
            reply_markup=get_confirm_keyboard_simple(),
            parse_mode="HTML"
        )
    elif action_type == 'edit':
        await state.update_data(channel_to_edit=channel_name)
        await message.answer(
            f"üìù <b>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª:</b> {channel_name}\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π ID: {CHANNELS[channel_name]}\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_channel_edit_actions_keyboard(),
            parse_mode="HTML"
        )

@dp.message(F.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
async def confirm_delete_channel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()
    
    if current_state == ChannelManageStates.selecting_channel.state:
        channel_name = data.get('channel_to_delete')
        if channel_name:
            if db.delete_channel(channel_name):
                # –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
                load_channels_from_db()
                
                await message.answer(
                    f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel_name}</b> –≤–∏–¥–∞–ª–µ–Ω–æ!",
                    reply_markup=get_channel_management_keyboard(),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É!",
                    reply_markup=get_channel_management_keyboard()
                )
            await state.set_state(ChannelManageStates.choosing_action)
    elif current_state == ChannelManageStates.entering_new_channel_name.state:
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏
        old_name = data.get('channel_to_edit')
        new_name = data.get('new_channel_name')
        
        if db.rename_channel(old_name, new_name):
            load_channels_from_db()
            await message.answer(
                f"‚úÖ –ù–∞–∑–≤—É –∫–∞–Ω–∞–ª—É –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
                f"–°—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞: <b>{old_name}</b>\n"
                f"–ù–æ–≤–∞ –Ω–∞–∑–≤–∞: <b>{new_name}</b>",
                reply_markup=get_channel_management_keyboard(),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏!",
                reply_markup=get_channel_management_keyboard()
            )
        await state.set_state(ChannelManageStates.choosing_action)
    elif current_state == ChannelManageStates.entering_new_channel_id.state:
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ ID
        channel_name = data.get('channel_to_edit')
        new_id = data.get('new_channel_id')
        
        if db.update_channel(channel_name, new_id):
            load_channels_from_db()
            await message.answer(
                f"‚úÖ ID –∫–∞–Ω–∞–ª—É –∑–º—ñ–Ω–µ–Ω–æ!\n\n"
                f"–ö–∞–Ω–∞–ª: <b>{channel_name}</b>\n"
                f"–ù–æ–≤–∏–π ID: {new_id}\n\n"
                f"‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–¥–∞—Ç–∏ –±–æ—Ç–∞ –¥–æ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É!",
                reply_markup=get_channel_management_keyboard(),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ ID!",
                reply_markup=get_channel_management_keyboard()
            )
        await state.set_state(ChannelManageStates.choosing_action)

@dp.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_action(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if "ChannelManage" in current_state:
        await message.answer(
            "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=get_channel_management_keyboard()
        )
        await state.set_state(ChannelManageStates.choosing_action)

# ===== –†–ï–î–ê–ì–£–í–ê–¢–ò –ö–ê–ù–ê–õ =====

@dp.message(ChannelManageStates.choosing_action, F.text == "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª")
async def edit_channel_start(message: Message, state: FSMContext):
    if not CHANNELS:
        await message.answer("‚ùå –ù–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
        return
    
    await message.answer(
        "üìù <b>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª:",
        reply_markup=get_channels_list_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(action_type='edit')
    await state.set_state(ChannelManageStates.selecting_channel)

@dp.message(F.text == "üìù –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É")
async def change_channel_name(message: Message, state: FSMContext):
    data = await state.get_data()
    channel_name = data.get('channel_to_edit')
    
    await message.answer(
        f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞: <b>{channel_name}</b>\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(ChannelManageStates.entering_new_channel_name)

@dp.message(ChannelManageStates.entering_new_channel_name)
async def new_name_entered(message: Message, state: FSMContext):
    new_name = message.text.strip()
    
    if new_name in CHANNELS:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î! –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:")
        return
    
    data = await state.get_data()
    old_name = data.get('channel_to_edit')
    
    await state.update_data(new_channel_name=new_name)
    await message.answer(
        f"üìù <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏:</b>\n\n"
        f"–°—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞: <b>{old_name}</b>\n"
        f"‚û°Ô∏è –ù–æ–≤–∞ –Ω–∞–∑–≤–∞: <b>{new_name}</b>\n\n"
        f"ID –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è: {CHANNELS[old_name]}",
        reply_markup=get_confirm_keyboard_simple(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üîó –ó–º—ñ–Ω–∏—Ç–∏ ID")
async def change_channel_id(message: Message, state: FSMContext):
    data = await state.get_data()
    channel_name = data.get('channel_to_edit')
    
    await message.answer(
        f"–ö–∞–Ω–∞–ª: <b>{channel_name}</b>\n"
        f"–ü–æ—Ç–æ—á–Ω–∏–π ID: {CHANNELS[channel_name]}\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π ID (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @new_channel):",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(ChannelManageStates.entering_new_channel_id)

@dp.message(ChannelManageStates.entering_new_channel_id)
async def new_id_entered(message: Message, state: FSMContext):
    channel_link = message.text.strip()
    
    if not (channel_link.startswith('@') or 't.me/' in channel_link):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å ID —É —Ñ–æ—Ä–º–∞—Ç—ñ @channel –∞–±–æ https://t.me/channel")
        return
    
    if 't.me/' in channel_link:
        channel_id = '@' + channel_link.split('t.me/')[-1].strip('/')
    else:
        channel_id = channel_link
    
    data = await state.get_data()
    channel_name = data.get('channel_to_edit')
    
    await state.update_data(new_channel_id=channel_id)
    await message.answer(
        f"üìù <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ ID:</b>\n\n"
        f"–ö–∞–Ω–∞–ª: <b>{channel_name}</b>\n"
        f"–°—Ç–∞—Ä–∏–π ID: {CHANNELS[channel_name]}\n"
        f"‚û°Ô∏è –ù–æ–≤–∏–π ID: {channel_id}",
        reply_markup=get_confirm_keyboard_simple(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_edit_actions(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state == ChannelManageStates.selecting_channel.state or current_state == ChannelManageStates.entering_new_channel_name.state or current_state == ChannelManageStates.entering_new_channel_id.state:
        await message.answer(
            "üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏:",
            reply_markup=get_channel_management_keyboard()
        )
        await state.set_state(ChannelManageStates.choosing_action)

# ===== –°–ü–ò–°–û–ö –ö–ê–ù–ê–õ–Ü–í =====

@dp.message(ChannelManageStates.choosing_action, F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤")
async def show_channels_list(message: Message):
    if not CHANNELS:
        await message.answer("‚ùå –ù–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
        return
    
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤:</b>\n\n"
    for idx, (name, channel_id) in enumerate(CHANNELS.items(), 1):
        text += f"{idx}. <b>{name}</b>\n   ID: {channel_id}\n\n"
    
    await message.answer(text, parse_mode="HTML")

# ============= –í–ò–•–Ü–î –ó –ê–î–ú–Ü–ù–ö–ò =============

@dp.message(AdminStates.in_admin_panel, F.text == "üö™ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω–∫–∏")
async def exit_admin(message: Message, state: FSMContext):
    await message.answer("üëã –í–∏–π—à–ª–∏.", reply_markup=ReplyKeyboardRemove())
    await state.clear()

# ============= –ö–û–õ–ë–ï–ö–ò –ú–û–î–ï–†–ê–¶–Ü–á =============

@dp.callback_query(F.data.startswith("approve_"))
async def approve_post(callback: CallbackQuery):
    from aiogram.types import InputMediaPhoto, InputMediaVideo
    post_id = int(callback.data.split("_")[1])
    post_data = db.get_post_by_id(post_id)
    if not post_data:
        return
    _, user_id, username, channel, msg_data, _ = post_data
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞–Ω–∞–ª–∏ –∑ –ë–î –ø–µ—Ä–µ–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é
    load_channels_from_db()
    channel_id = CHANNELS.get(channel)
    
    if not channel_id:
        await callback.answer(f"‚ùå –ö–∞–Ω–∞–ª '{channel}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î!")
        return
    
    try:
        if msg_data.get('media_group'):
            media_group = []
            caption_text = msg_data.get('caption', '')
            for idx, item in enumerate(msg_data['media_group']):
                if item['type'] == 'photo':
                    media_group.append(InputMediaPhoto(media=item['file_id'], caption=caption_text if idx == 0 else None))
                elif item['type'] == 'video':
                    media_group.append(InputMediaVideo(media=item['file_id'], caption=caption_text if idx == 0 else None))
            await bot.send_media_group(chat_id=channel_id, media=media_group)
        elif msg_data.get('photo'):
            await bot.send_photo(channel_id, msg_data['photo'], caption=msg_data.get('caption', ''))
        elif msg_data.get('video'):
            await bot.send_video(channel_id, msg_data['video'], caption=msg_data.get('caption', ''))
        else:
            await bot.send_message(channel_id, msg_data.get('text', ''))
        
        db.update_post_status(post_id, 'approved')
        await bot.send_message(user_id, f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ '{channel}'!")
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer("‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
    except Exception as e:
        await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_post(callback: CallbackQuery):
    post_id = int(callback.data.split("_")[1])
    post_data = db.get_post_by_id(post_id)
    if not post_data:
        return
    _, user_id, _, channel, _, _ = post_data
    db.update_post_status(post_id, 'rejected')
    try:
        await bot.send_message(user_id, f"‚ùå –ü–æ—Å—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
    except:
        pass
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ!")

async def setup_bot_commands():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ü–æ—á–∞—Ç–∏"),
        BotCommand(command="help", description="–î–æ–≤—ñ–¥–∫–∞")
    ])

async def main():
    await db.create_tables()
    load_channels_from_db()  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞–Ω–∞–ª–∏ –∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    await setup_bot_commands()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
