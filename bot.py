import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, BotCommand
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import datetime, timedelta
from database import Database
from config import BOT_TOKEN
from admin_handlers import setup_admin_handlers

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database()

CHANNELS = {}

album_data = {}

def load_channels_from_db():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–∞–Ω–∞–ª–∏ –∑ –ë–î –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫"""
    global CHANNELS
    CHANNELS = db.get_all_channels()
    logger.info(f"üì° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(CHANNELS)} –∫–∞–Ω–∞–ª—ñ–≤ –∑ –ë–î")

class UserStates(StatesGroup):
    waiting_for_post = State()
    confirming_post = State()

def get_write_another_post_keyboard():
    buttons = [
        [KeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ —â–µ 1 –ø–æ—Å—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_confirm_keyboard():
    buttons = [
        [KeyboardButton(text="‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")],
        [KeyboardButton(text="üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, command: CommandObject):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑_–Ω—ñ–∫–∞"
    db.add_user(user_id, username)
    
    if command.args:
        channel_param_raw = command.args.strip()
        channel_found = None
        
        channel_param_name = channel_param_raw.replace('_', ' ')
        for channel_name in CHANNELS.keys():
            if channel_name.lower() == channel_param_name.lower() or channel_param_name.lower() in channel_name.lower():
                channel_found = channel_name
                break
        
        if not channel_found:
            search_id = channel_param_raw if channel_param_raw.startswith('@') else f'@{channel_param_raw}'
            for channel_name, channel_id in CHANNELS.items():
                if channel_id.lower() == search_id.lower():
                    channel_found = channel_name
                    break
        
        if channel_found:
            await state.update_data(channel=channel_found)
            await message.answer(
                f"üì¢ <b>{channel_found}</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å—Ç:",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="HTML"
            )
            await state.set_state(UserStates.waiting_for_post)
        else:
            await message.answer(
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.",
                reply_markup=ReplyKeyboardRemove()
            )
    else:
        await message.answer(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.\n\nüí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫–µ –≤–∞–º –Ω–∞–¥–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.",
            reply_markup=ReplyKeyboardRemove()
        )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìö <b>–î–æ–≤—ñ–¥–∫–∞</b>\n\n"
        "/start - –ø–æ—á–∞—Ç–∏\n"
        "/help - –¥–æ–≤—ñ–¥–∫–∞",
        parse_mode="HTML"
    )

@dp.message(F.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ —â–µ 1 –ø–æ—Å—Ç")
async def write_another_post_button(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    channel = data.get('channel')
    
    if not channel:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    spam_settings = db.get_spam_settings()
    
    if spam_settings['enabled']:
        last_post_time = db.get_last_post_time(user_id)
        if last_post_time:
            time_diff = datetime.now() - last_post_time
            if time_diff < timedelta(minutes=spam_settings['minutes']):
                remaining = spam_settings['minutes'] - int(time_diff.total_seconds() / 60)
                await message.answer(
                    f"‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ —â–µ {remaining} —Ö–≤. –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ—Å—Ç–æ–º.",
                    reply_markup=get_write_another_post_keyboard()
                )
                return
    
    await message.answer(
        f"üì¢ <b>{channel}</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å—Ç:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_post)

@dp.message(UserStates.waiting_for_post)
async def handle_post_content(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.media_group_id:
        album_key = f"{user_id}_{message.media_group_id}"
        
        if album_key not in album_data:
            album_data[album_key] = {
                'items': [],
                'caption': '',
                'user_id': user_id,
                'state': state,
                'task': None
            }
        
        if message.photo:
            album_data[album_key]['items'].append({'type': 'photo', 'file_id': message.photo[-1].file_id})
        elif message.video:
            album_data[album_key]['items'].append({'type': 'video', 'file_id': message.video.file_id})
        
        if message.caption:
            album_data[album_key]['caption'] = message.caption
        
        if album_data[album_key]['task']:
            album_data[album_key]['task'].cancel()
        
        async def finish_album():
            await asyncio.sleep(1.0)
            if album_key in album_data:
                data = album_data[album_key]
                items = data['items']
                photos = sum(1 for m in items if m['type'] == 'photo')
                videos = sum(1 for m in items if m['type'] == 'video')
                media_text = []
                if photos > 0:
                    media_text.append(f"{photos} —Ñ–æ—Ç–æ")
                if videos > 0:
                    media_text.append(f"{videos} –≤—ñ–¥–µ–æ")
                
                await state.update_data(
                    media_group=items,
                    caption=data['caption'],
                    has_content=True
                )
                await bot.send_message(
                    user_id,
                    f"üì∏ –ê–ª—å–±–æ–º: {' —Ç–∞ '.join(media_text)}\n\n–û–±–µ—Ä–∏ –¥—ñ—é:",
                    reply_markup=get_confirm_keyboard()
                )
                await state.set_state(UserStates.confirming_post)
                del album_data[album_key]
        
        album_data[album_key]['task'] = asyncio.create_task(finish_album())
        return
    
    if message.photo:
        await state.update_data(photo=message.photo[-1].file_id, caption=message.caption or '', has_content=True)
        await message.answer("üì∏ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=get_confirm_keyboard())
        await state.set_state(UserStates.confirming_post)
        return
    
    if message.video:
        await state.update_data(video=message.video.file_id, caption=message.caption or '', has_content=True)
        await message.answer("üé• –í—ñ–¥–µ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=get_confirm_keyboard())
        await state.set_state(UserStates.confirming_post)
        return
    
    if message.text:
        await state.update_data(text_content=message.text, has_content=True)
        await message.answer("üìù –¢–µ–∫—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=get_confirm_keyboard())
        await state.set_state(UserStates.confirming_post)
        return

@dp.message(UserStates.confirming_post, F.text == "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")
async def confirm_and_send_post(message: Message, state: FSMContext):
    data = await state.get_data()
    channel = data.get('channel')
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑_–Ω—ñ–∫–∞"
    
    spam_settings = db.get_spam_settings()
    
    if spam_settings['enabled']:
        last_post_time = db.get_last_post_time(user_id)
        if last_post_time:
            time_diff = datetime.now() - last_post_time
            if time_diff < timedelta(minutes=spam_settings['minutes']):
                remaining = spam_settings['minutes'] - int(time_diff.total_seconds() / 60)
                await message.answer(
                    f"‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ —â–µ {remaining} —Ö–≤. –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ—Å—Ç–æ–º.",
                    reply_markup=get_write_another_post_keyboard()
                )
                await state.clear()
                await state.update_data(channel=channel)
                return
    
    msg_data = {}
    if data.get('media_group'):
        msg_data['media_group'] = data['media_group']
        msg_data['caption'] = data.get('caption', '')
    elif data.get('photo'):
        msg_data['photo'] = data['photo']
        msg_data['caption'] = data.get('caption', '')
    elif data.get('video'):
        msg_data['video'] = data['video']
        msg_data['caption'] = data.get('caption', '')
    elif data.get('text_content'):
        msg_data['text'] = data['text_content']
    
    post_id = db.add_post(user_id, username, channel, msg_data)
    await message.answer(
        f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –ó–∞—è–≤–∫–∞ #{post_id}",
        reply_markup=get_write_another_post_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()
    await state.update_data(channel=channel)

@dp.message(UserStates.confirming_post, F.text == "üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ")
async def restart_post_creation(message: Message, state: FSMContext):
    data = await state.get_data()
    channel = data.get('channel')
    await message.answer(
        f"üîÑ –ó–∞–Ω–æ–≤–æ!\n\nüì¢ <b>{channel}</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å—Ç:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_post)

async def setup_bot_commands():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ü–æ—á–∞—Ç–∏"),
        BotCommand(command="help", description="–î–æ–≤—ñ–¥–∫–∞")
    ])

async def main():
    await db.create_tables()
    
    # –û—á–∏—â–µ–Ω–Ω—è —Å–∏—Ä—ñ—Ç—Å—å–∫–∏—Ö –∑–∞—è–≤–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    orphaned_count = db.cleanup_orphaned_posts()
    if orphaned_count > 0:
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {orphaned_count} —Å–∏—Ä—ñ—Ç—Å—å–∫–∏—Ö –∑–∞—è–≤–æ–∫")
    
    load_channels_from_db()
    setup_admin_handlers(dp, bot, load_channels_from_db)
    await setup_bot_commands()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
